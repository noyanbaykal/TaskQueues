{"version":3,"sources":["logic/utilities.js","components/Queue.js","components/Task.js","components/TaskList.js","Client.js","logic/useQueues.js","components/QueueList.js","components/App.js","serviceWorker.js","index.js"],"names":["DISPLAY_MODES","Object","freeze","NO_CONTENT","EDIT","DISPLAY","NEED_CONFIRMATION","SHOULD_DISPLAY","content","isHexColorString","string","test","getRandomColor","Math","floor","random","toString","padEnd","Queue","queue","handleCreate","handleEdit","handleDelete","handleView","active","id","pendingTasks","queueName","name","queueColor","color","taskCount","length","useState","displayMode","setDisplayMode","beforeEditValues","setBeforeEditValues","setName","setColor","showButtons","setShowButtons","taskCountTransition","setTaskCountTransition","useEffect","onClickCreateOrEdit","onClickCard","onClickView","onClickDelete","onClickCancel","onModalConfirm","changes","getLabelStyle","hexColor","fontColor","parseInt","substring","border","backgroundColor","getConfirmationButtons","onConfirm","onCancel","Card","Content","extra","className","onClick","disabled","undefined","Icon","style","textAlign","display","margin","marginBottom","tabIndex","onKeyDown","e","keyCode","target","currentTarget","getCardOnKeyPressHandler","Transition","animation","duration","visible","Label","htmlFor","Input","type","title","value","onChange","event","error","Header","overflowWrap","paddingLeft","paddingBottom","marginRight","Task","taskInfo","queueDropdownOptions","handleComplete","initialQueueId","queueId","initialText","text","completed","setText","setQueueId","taskCompletedTransition","setTaskCompletedTransition","onChangeDropdown","onDeleteConfirm","onClickComplete","setTimeout","borderLeft","opacity","getCardOnClickValue","map","key","DELETE_CONFIRMATION","TaskList","taskInfos","actionCreateTask","actionEditTask","actionDeleteTask","actionCompleteTask","getNoTasksMessage","client","queues","localStorage","setItem","JSON","stringify","savedQueues","parse","getItem","Promise","resolve","_","removeItem","viewModes","topTasks","allPendingTasks","viewQueue","getItemById","array","i","findItem","useQueues","setQueues","view","setView","viewQueueId","setViewQueueId","showCompletedTasks","setShowCompletedTasks","getQueues","then","updateQueues","newQueues","initializeTaskInfo","task","getTasksFromQueue","push","completedTasks","getTopTasksHelper","sourceArray","destinationArray","count","endIndex","getTopTasks","getCurrentView","getShowCompletedTasks","getTaskInfos","getQueueDropdownOptions","getSelectedQueueId","actionViewChange","newView","actionViewQueue","actionToggleShowCompletedTasks","actionCreateQueue","newQueue","uuidv4","actionEditQueue","actionDeleteQueue","filter","taskId","newText","taskIndex","splice","completedTask","unshift","QueueList","getViewRadioInput","label","viewMode","checked","selectedQueueId","marginLeft","App","as","Divider","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b991a71b.chunk.js","sourcesContent":["const KEY_CODE_ENTER = 13;\r\nconst KEY_CODE_SPACE = 32;\r\n\r\nexport const SHOULD_DISPATCH = (keyCode) => {\r\n  return keyCode === KEY_CODE_ENTER || keyCode === KEY_CODE_SPACE;\r\n};\r\n\r\nexport const DISPLAY_MODES = Object.freeze({\r\n  NO_CONTENT: 'noContent',\r\n  EDIT: 'edit',\r\n  DISPLAY: 'display',\r\n  NEED_CONFIRMATION: 'needConfirmation',\r\n});\r\n\r\nexport const SHOULD_DISPLAY = (content) => {\r\n  return content ? DISPLAY_MODES.DISPLAY : DISPLAY_MODES.NO_CONTENT;\r\n};\r\n\r\nexport const isHexColorString = (string) => {\r\n  return /^#([A-Fa-f0-9]{3}$)|([A-Fa-f0-9]{6}$)/.test(string);\r\n};\r\n\r\nconst HEX_STRING_LENGTH = 7;\r\nconst HEX = 16;\r\n\r\nexport const getRandomColor = () => {\r\n  let hex = `#${Math.floor(Math.random()*16777215).toString(HEX)}`;\r\n  return hex.padEnd(HEX_STRING_LENGTH, '0');\r\n};\r\n\r\n// https://stackoverflow.com/a/1855903\r\nexport const getFontColor = (hexColor) => {\r\n  const r = parseInt(hexColor.substring(1, 3), HEX);\r\n  const g = parseInt(hexColor.substring(3, 5), HEX);\r\n  const b = parseInt(hexColor.substring(5, 7), HEX);\r\n\r\n  let luminance = ( 0.299 * r + 0.587 * g + 0.114 * b ) / 255;\r\n\r\n  return luminance > 0.5\r\n    ? '#000000'   // bright colors - black font\r\n    : '#ffffff';  // dark colors - white font\r\n};\r\n\r\nexport const findItem = (array, key, value) => {\r\n  for(let i = 0; i < array.length; i++) {\r\n    if(array[i][key] === value) {\r\n      return array[i];\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Icon, Input, Label, Transition } from 'semantic-ui-react';\r\n\r\nimport { DISPLAY_MODES, SHOULD_DISPATCH, SHOULD_DISPLAY, isHexColorString, getFontColor, getRandomColor } from '../logic/utilities';\r\n\r\nconst TASK_ANIMATION_TYPE = 'flash';\r\nconst TASK_ANIMATION_DURATION = 600;\r\n\r\nconst HTML_ID_INPUT_NAME = 'name';\r\nconst HTML_ID_INPUT_COLOR = 'color';\r\nconst INPUT_FIELD_INFO_NAME = 'Enter queue name:';\r\nconst INPUT_FIELD_INFO_COLOR = 'Select a color in 3 or 6 digit hex format: #ffffff';\r\nconst DELETE_CONFIRMATION = 'Are you sure you want to delete this Queue?';\r\n\r\n// The queue will be undefined if this is the 'add queue' button instance\r\nfunction Queue({ queue, handleCreate, handleEdit, handleDelete, handleView, active }) {\r\n  const {id, pendingTasks, name: queueName, color: queueColor} = queue || {};\r\n  const taskCount = (pendingTasks || []).length;\r\n\r\n  const [displayMode, setDisplayMode] = useState(SHOULD_DISPLAY(queue));\r\n  const [beforeEditValues, setBeforeEditValues] = useState({});\r\n  const [name, setName] = useState(queueName || '');\r\n  const [color, setColor] = useState(queueColor || getRandomColor());\r\n  const [showButtons, setShowButtons] = useState(false);\r\n  const [taskCountTransition, setTaskCountTransition] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setTaskCountTransition((taskCountTransition) => !taskCountTransition);\r\n  }, [taskCount]);\r\n\r\n  const onClickCreateOrEdit = () => {\r\n    setBeforeEditValues({\r\n      name,\r\n      color\r\n    });\r\n\r\n    setDisplayMode(DISPLAY_MODES.EDIT);\r\n  };\r\n\r\n  const onClickCard = () => {\r\n    setShowButtons((showButtons) => !showButtons);\r\n  };\r\n\r\n  const onClickView = () => {\r\n    handleView(id);\r\n  };\r\n\r\n  const onClickDelete = () => {\r\n    setDisplayMode(DISPLAY_MODES.NEED_CONFIRMATION);\r\n  };\r\n\r\n  const onClickCancel = () => {\r\n    if(displayMode === DISPLAY_MODES.EDIT) {\r\n      setName(beforeEditValues.name);\r\n      setColor(beforeEditValues.color);\r\n\r\n      setBeforeEditValues({});\r\n    }\r\n\r\n    setDisplayMode(SHOULD_DISPLAY(queue));\r\n  };\r\n\r\n  const onModalConfirm = () => {\r\n    if(beforeEditValues.name !== name || beforeEditValues.color !== color) {\r\n      const changes = {\r\n        name,\r\n        color\r\n      };\r\n\r\n      if(id) {\r\n        changes.id = id;\r\n        handleEdit(changes);\r\n      } else {\r\n        // Need to manually reset text and queueId to prevent staleness after creation.\r\n        setName('');\r\n        setColor(getRandomColor());\r\n\r\n        handleCreate(changes);\r\n      }\r\n    }\r\n\r\n    setBeforeEditValues({});\r\n    setDisplayMode(SHOULD_DISPLAY(queue));\r\n  };\r\n\r\n  const getLabelStyle = () => {\r\n    const fontColor = getFontColor(color);\r\n    const border = `1px ${fontColor === '#ffffff' ? 'outset white' : 'solid black'}`;\r\n\r\n    return {\r\n      backgroundColor: color,\r\n      color: fontColor,\r\n      border,\r\n    };\r\n  };\r\n\r\n  const inputHasError = () => {\r\n    return !isHexColorString(color) || !name || name.length < 1;\r\n  };\r\n\r\n  const getCardContent = () => {\r\n    return (\r\n      <>\r\n        <div className='ui tiny label' style={{ backgroundColor: color }}/>\r\n        { taskCount > 0 &&\r\n          <Transition\r\n            animation={TASK_ANIMATION_TYPE}\r\n            duration={TASK_ANIMATION_DURATION}\r\n            visible={taskCountTransition}\r\n          >\r\n            <div className='ui circular label floating'\r\n              style={getLabelStyle()}\r\n            >\r\n              {taskCount}\r\n            </div>\r\n          </Transition>\r\n        }\r\n        {\r\n          displayMode === DISPLAY_MODES.EDIT &&\r\n          <>\r\n            <Label htmlFor={HTML_ID_INPUT_COLOR}>{INPUT_FIELD_INFO_COLOR}</Label>\r\n            <Input\r\n              id={HTML_ID_INPUT_COLOR}\r\n              type='text'\r\n              title='Enter Hex formatted color string'\r\n              value={color}\r\n              onChange={event => setColor(event.target.value)}\r\n              error={isHexColorString(color) ? undefined : true}\r\n            />\r\n            <Label htmlFor={HTML_ID_INPUT_NAME}>{INPUT_FIELD_INFO_NAME}</Label>\r\n            <Input\r\n              id={HTML_ID_INPUT_NAME}\r\n              type='text'\r\n              value={name}\r\n              onChange={event => setName(event.target.value)}\r\n            />\r\n          </>\r\n        }\r\n        {\r\n          displayMode !== DISPLAY_MODES.EDIT &&\r\n          <Card.Content>\r\n            <Card.Header textAlign='center' style={{ overflowWrap: 'break-word' }}>\r\n              {name}\r\n            </Card.Header>\r\n          </Card.Content>\r\n        }\r\n        {\r\n          displayMode === DISPLAY_MODES.NEED_CONFIRMATION &&\r\n            <Label>{DELETE_CONFIRMATION}</Label>\r\n        }\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getCardExtraContent = () => {\r\n    if(displayMode === DISPLAY_MODES.DISPLAY) {\r\n      if(!showButtons) {\r\n        return null;\r\n      }\r\n\r\n      return (\r\n        <Card.Content extra>\r\n          <button className='left floated' onClick={onClickCreateOrEdit} style={{ marginRight: '0.65em' }}>\r\n            <Icon className='pencil alternate' />\r\n          </button>\r\n          <button className='left floated' onClick={onClickDelete}>\r\n            <Icon className='trash' />\r\n          </button>\r\n          <button className='right floated' onClick={onClickView}>\r\n            <Icon className='eye'/>\r\n          </button>\r\n        </Card.Content>\r\n      );\r\n    }\r\n\r\n    if(displayMode === DISPLAY_MODES.EDIT) {\r\n      return getConfirmationButtons(onModalConfirm, onClickCancel);\r\n    }\r\n\r\n    if(displayMode === DISPLAY_MODES.NEED_CONFIRMATION) {\r\n      return getConfirmationButtons(() => handleDelete(id), onClickCancel);\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const getConfirmationButtons = (onConfirm, onCancel) => {\r\n    return (\r\n      <Card.Content extra>\r\n        <button className='left floated' onClick={onConfirm} disabled={inputHasError() ? true : undefined}>\r\n          <Icon className='check' />\r\n        </button>\r\n        <button className='right floated' onClick={onCancel}>\r\n          <Icon className='delete' />\r\n        </button>\r\n      </Card.Content>\r\n    );\r\n  };\r\n\r\n  const getCardOnKeyPressHandler = () => {\r\n    if(displayMode === DISPLAY_MODES.DISPLAY) {\r\n      return function(e) {\r\n        if(SHOULD_DISPATCH(e.target === e.currentTarget && e.keyCode)) {\r\n          onClickCard();\r\n        }\r\n      };\r\n    }\r\n\r\n    return undefined;\r\n  };\r\n\r\n  return (\r\n    <div className={`Queue ${displayMode}`} style={{ textAlign: 'center' }}> {/* textAlign needed to horizontally center the plus button */}\r\n      {\r\n        displayMode === DISPLAY_MODES.NO_CONTENT\r\n        ?\r\n          <button onClick={onClickCreateOrEdit} style={{ display: 'inline-block', margin: '0 auto' }}>\r\n            <Icon className='plus circle' />\r\n          </button>\r\n        :\r\n          <Card\r\n            style={{ marginBottom: '1.2em' }}\r\n            onClick={onClickCard}\r\n            tabIndex={displayMode === DISPLAY_MODES.DISPLAY ? 0 : undefined}\r\n            onKeyDown={getCardOnKeyPressHandler()}\r\n          >\r\n            {\r\n              getCardContent()\r\n            }\r\n            {\r\n              active &&\r\n                <Icon className={'eye'} style={{ paddingLeft: '0.3em', paddingBottom: '1.5em' }}/>\r\n            }\r\n            {\r\n              getCardExtraContent()\r\n            }\r\n          </Card>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nQueue.propTypes = {\r\n  queue: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    pendingTasks: PropTypes.array.isRequired,\r\n  }),\r\n  handleCreate: PropTypes.func.isRequired,\r\n  handleEdit: PropTypes.func.isRequired,\r\n  handleDelete: PropTypes.func.isRequired,\r\n  handleView: PropTypes.func.isRequired,\r\n  active: PropTypes.bool,\r\n};\r\n\r\nexport default Queue;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Icon, Input, Label, Transition } from 'semantic-ui-react';\r\n\r\nimport { DISPLAY_MODES, SHOULD_DISPLAY } from '../logic/utilities';\r\n\r\nconst TASK_ANIMATION_TYPE = 'jiggle';\r\nconst TASK_ANIMATION_DURATION = 500;\r\nconst TASK_BORDER_SIZE = '0.8em';\r\nconst COMPLETED_TASK_OPACITY = 0.65;\r\n\r\nconst HTML_ID_INPUT_TASK = 'task';\r\nconst HTML_ID_INPUT_QUEUE = 'queue-select';\r\nconst LABEL_QUEUE_SELECT = 'Choose a Queue:';\r\nconst LABEL_INPUT_TASK = 'Enter task';\r\nconst DELETE_CONFIRMATION = (queueName) => {\r\n  return `Are you sure you want to delete this task, in queue: ${queueName}?`;\r\n};\r\n\r\n// The taskInfo will be undefined if this is the 'add queue' button instance\r\nfunction Task({ taskInfo, queueDropdownOptions, handleCreate, handleEdit, handleDelete, handleComplete }) {\r\n  const [displayMode, setDisplayMode] = useState(SHOULD_DISPLAY(taskInfo));\r\n\r\n  const { queueName, queueId: initialQueueId, id, color, text: initialText, completed } = taskInfo || {};\r\n\r\n  const [beforeEditValues, setBeforeEditValues] = useState({});\r\n  const [text, setText] = useState(initialText || '');\r\n  const [queueId, setQueueId] = useState(initialQueueId || queueDropdownOptions[0].id);\r\n  const [showButtons, setShowButtons] = useState(false);\r\n  const [taskCompletedTransition, setTaskCompletedTransition] = useState(true);\r\n\r\n  const onClickCreateOrEdit = () => {\r\n    setBeforeEditValues({\r\n      text,\r\n      queueId,\r\n    });\r\n\r\n    setDisplayMode(DISPLAY_MODES.EDIT);\r\n  };\r\n\r\n  const onClickDelete = () => {\r\n    setDisplayMode(DISPLAY_MODES.NEED_CONFIRMATION);\r\n  };\r\n\r\n  const onClickCancel = () => {\r\n    if(displayMode === DISPLAY_MODES.EDIT) {\r\n      setText(beforeEditValues.text);\r\n      setQueueId(beforeEditValues.queueId);\r\n\r\n      setBeforeEditValues({});\r\n    }\r\n\r\n    setDisplayMode(SHOULD_DISPLAY(taskInfo));\r\n  };\r\n\r\n  const onChangeDropdown = (event) => {\r\n    if(queueId !== event.target.value) {\r\n      setQueueId(event.target.value);\r\n    }\r\n  };\r\n\r\n  const onModalConfirm = () => {\r\n    if(beforeEditValues.text !== text || beforeEditValues.queueId !== queueId) {\r\n      if(id) {\r\n        handleEdit(queueId, id, text);\r\n      } else {\r\n        // Need to manually reset text and queueId to prevent staleness after creation.\r\n        setText('');\r\n        setQueueId(queueDropdownOptions[0].id);\r\n\r\n        handleCreate(queueId, text);\r\n      }\r\n    }\r\n\r\n    setBeforeEditValues({});\r\n    setDisplayMode(SHOULD_DISPLAY(taskInfo));\r\n  };\r\n\r\n  const onDeleteConfirm = () => {\r\n    setDisplayMode(SHOULD_DISPLAY(taskInfo));\r\n\r\n    handleDelete(queueId, id);\r\n  };\r\n\r\n  const onClickComplete = () => {\r\n    setTaskCompletedTransition((taskCompletedTransition) => !taskCompletedTransition);\r\n\r\n    setTimeout(() => {\r\n      setDisplayMode(SHOULD_DISPLAY(taskInfo));\r\n\r\n      handleComplete(queueId, id);\r\n    }, TASK_ANIMATION_DURATION);\r\n  };\r\n\r\n  const getCardContent = () => {\r\n    return (\r\n      <>\r\n        {\r\n          displayMode === DISPLAY_MODES.EDIT &&\r\n          <>\r\n            { \r\n              !initialQueueId &&\r\n                <>\r\n                  <Label htmlFor={HTML_ID_INPUT_QUEUE}>{LABEL_QUEUE_SELECT}</Label>\r\n                  <select id={HTML_ID_INPUT_QUEUE} onChange={onChangeDropdown}>\r\n                    {\r\n                      queueDropdownOptions.map((queue) =>\r\n                        <option key={queue.id} value={queue.id}>{queue.name}</option>\r\n                      )\r\n                    }\r\n                  </select>\r\n                </>\r\n            }\r\n            <Label htmlFor={HTML_ID_INPUT_TASK}>{LABEL_INPUT_TASK}</Label>\r\n            <Input\r\n              id={HTML_ID_INPUT_TASK}\r\n              type='text'\r\n              value={text}\r\n              onChange={event => setText(event.target.value)}\r\n            />\r\n          </>\r\n        }\r\n        {\r\n          displayMode !== DISPLAY_MODES.EDIT &&\r\n            <Card.Content>\r\n              {/* Need to override text color after giving the card an onClick handler*/}\r\n              <div style={{ overflowWrap: 'break-word', textAlign: 'center', color: 'black' }}>\r\n                {text}\r\n                {\r\n                  completed &&\r\n                    <Icon className='right floated green check'></Icon>\r\n                }\r\n              </div>\r\n            </Card.Content>\r\n        }\r\n        {\r\n          displayMode === DISPLAY_MODES.NEED_CONFIRMATION &&\r\n            <Label>{DELETE_CONFIRMATION(queueName)}</Label>\r\n        }\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getCardExtraContent = () => {\r\n    if(displayMode === DISPLAY_MODES.DISPLAY) {\r\n      if(!showButtons) {\r\n        return null;\r\n      }\r\n      \r\n      return (\r\n        <Card.Content extra>\r\n          <button onClick={onClickCreateOrEdit} style={{ marginRight: '0.65em' }}>\r\n            <Icon className='pencil alternate' />\r\n          </button>\r\n          <button onClick={onClickDelete}>\r\n              <Icon className='trash' />\r\n          </button>\r\n          <button className='right floated' onClick={onClickComplete}>\r\n            <Icon className='check square outline' />\r\n          </button>\r\n        </Card.Content>\r\n      );\r\n    }\r\n\r\n    if(displayMode === DISPLAY_MODES.EDIT) {\r\n      return getConfirmationButtons(onModalConfirm, onClickCancel);\r\n    }\r\n\r\n    if(displayMode === DISPLAY_MODES.NEED_CONFIRMATION) {\r\n      return getConfirmationButtons(onDeleteConfirm, onClickCancel);\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const getConfirmationButtons = (onConfirm, onCancel) => {\r\n    return (\r\n      <Card.Content extra>\r\n        <button className='left floated' onClick={onConfirm} disabled={!text || text.length < 1 ? true : undefined}>\r\n          <Icon className='check' />\r\n        </button>\r\n        <button className='right floated' onClick={onCancel}>\r\n          <Icon className='delete' />\r\n        </button>\r\n      </Card.Content>\r\n    );\r\n  };\r\n\r\n  // Semantic applies a hover effect to cards with onClick handlers set.\r\n  // Completed cards should not have this effect, or show any buttons.\r\n  const getCardOnClickValue = () => {\r\n    if (completed) {\r\n      return undefined;\r\n    }\r\n\r\n    return function() {\r\n      setShowButtons((showButtons) => !showButtons);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`Task ${displayMode}`} >\r\n      {\r\n        displayMode === DISPLAY_MODES.NO_CONTENT\r\n        ?\r\n          <div style={{ textAlign: 'center', paddingLeft: TASK_BORDER_SIZE }}>\r\n            <button onClick={onClickCreateOrEdit} style={{ display: 'inline-block', margin: '0 auto' }}>\r\n              <Icon className='plus circle' />\r\n            </button>\r\n          </div>\r\n        :\r\n          <Transition\r\n            animation={TASK_ANIMATION_TYPE}\r\n            duration={TASK_ANIMATION_DURATION}\r\n            visible={taskCompletedTransition}\r\n          >\r\n            <Card\r\n              style={{ marginBottom: '1em', borderLeft: `${TASK_BORDER_SIZE} solid ${color}`, opacity: completed ? COMPLETED_TASK_OPACITY : undefined }}\r\n              onClick={getCardOnClickValue()}\r\n            >\r\n              {\r\n                getCardContent()\r\n              }\r\n              {\r\n                getCardExtraContent()\r\n              }\r\n            </Card>\r\n          </Transition>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nTask.propTypes = {\r\n  taskInfo: PropTypes.shape({\r\n    queueName: PropTypes.string.isRequired,\r\n    queueId: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    completed: PropTypes.bool,\r\n  }),\r\n  queueDropdownOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n  })).isRequired,\r\n  handleCreate: PropTypes.func.isRequired,\r\n  handleEdit: PropTypes.func.isRequired,\r\n  handleDelete: PropTypes.func.isRequired,\r\n  handleComplete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Task from './Task';\r\n\r\nconst NO_TASKS = 'You have no pending tasks!';\r\n\r\nfunction TaskList({ taskInfos, queueDropdownOptions, actionCreateTask, actionEditTask, actionDeleteTask, actionCompleteTask }) {\r\n  const getNoTasksMessage = () => {\r\n    return (\r\n      <div style={{ marginBottom: '1em' }}>\r\n        {NO_TASKS}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className='TaskList' style={{ marginRight: '1em' }}>\r\n      { \r\n        taskInfos.length < 1\r\n        ? \r\n          <>\r\n            { getNoTasksMessage() }\r\n          </>\r\n        : (\r\n          <div>\r\n            { \r\n              taskInfos[0].completed &&\r\n                getNoTasksMessage()\r\n            }\r\n            {\r\n              taskInfos.map((taskInfo) => (\r\n                <Task\r\n                  key={`${taskInfo.id}`}\r\n                  taskInfo={taskInfo}\r\n                  queueDropdownOptions={queueDropdownOptions}\r\n                  handleCreate={actionCreateTask}\r\n                  handleEdit={actionEditTask}\r\n                  handleDelete={actionDeleteTask}\r\n                  handleComplete={actionCompleteTask}\r\n                />\r\n              ))\r\n            }\r\n          </div>\r\n          )\r\n      }\r\n      <Task\r\n        queueDropdownOptions={queueDropdownOptions}\r\n        handleCreate={actionCreateTask}\r\n        handleEdit={actionEditTask}\r\n        handleDelete={actionDeleteTask}\r\n        handleComplete={actionCompleteTask}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nTaskList.propTypes = {\r\n  taskInfos: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      queueName: PropTypes.string.isRequired,\r\n      queueId: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      color: PropTypes.string.isRequired,\r\n      text: PropTypes.string.isRequired,\r\n      completed: PropTypes.bool,\r\n    })\r\n  ).isRequired,\r\n  queueDropdownOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n  })).isRequired,\r\n  actionCreateTask: PropTypes.func.isRequired,\r\n  actionEditTask: PropTypes.func.isRequired,\r\n  actionDeleteTask: PropTypes.func.isRequired,\r\n  actionCompleteTask: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TaskList;\r\n","const LOCAL_STORAGE_KEY_QUEUES = 'queues';\r\n\r\nclass Client {\r\n  setQueues(queues) {\r\n    localStorage.setItem(LOCAL_STORAGE_KEY_QUEUES, JSON.stringify(queues));\r\n  };\r\n\r\n  getQueues() {\r\n    const savedQueues = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_QUEUES)) || [];\r\n    return new Promise((resolve, _) => resolve(savedQueues));\r\n  };\r\n\r\n  removeQueues() {\r\n    localStorage.removeItem(LOCAL_STORAGE_KEY_QUEUES);\r\n  };\r\n}\r\n\r\nexport const client = new Client();\r\n","import { useState, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { findItem } from './utilities';\r\nimport { client } from '../Client';\r\n\r\nconst viewModes = Object.freeze({\r\n  topTasks: 'topTasks',\r\n  allPendingTasks: 'allPendingTasks',\r\n  viewQueue: 'viewQueue',\r\n});\r\n\r\nconst getItemById = (array, id) => {\r\n  return findItem(array, 'id', id);\r\n};\r\n\r\nfunction useQueues() {\r\n  const [queues, setQueues] = useState([]);\r\n  const [view, setView] = useState(viewModes.topTasks);\r\n  const [viewQueueId, setViewQueueId] = useState(undefined);\r\n  const [showCompletedTasks, setShowCompletedTasks] = useState(false);\r\n\r\n  useEffect(() => {\r\n    client.getQueues().then((savedQueues) => {\r\n      if(savedQueues.length > 0) {\r\n        setViewQueueId(savedQueues[0].id);\r\n      }\r\n\r\n      setQueues(savedQueues);\r\n    });\r\n  }, []);\r\n\r\n  const getCurrentView = () => {\r\n    return view;\r\n  };\r\n\r\n  const getShowCompletedTasks = () => {\r\n    return showCompletedTasks;\r\n  };\r\n\r\n  const updateQueues = (newQueues) => {\r\n    setQueues(newQueues);\r\n    client.setQueues(newQueues);\r\n  };\r\n\r\n  const getTaskInfos = () => {\r\n    switch(view) {\r\n      case viewModes.viewQueue:\r\n        return getTasksFromQueue(viewQueueId);\r\n      case viewModes.allPendingTasks:\r\n        return getTopTasks();\r\n      case viewModes.topTasks:\r\n      default:\r\n        return getTopTasks(1);\r\n    }\r\n  };\r\n\r\n  const initializeTaskInfo = (queue, task) => {\r\n    return {\r\n      queueName: queue.name,\r\n      queueId: queue.id,\r\n      id: task.id,\r\n      color: queue.color,\r\n      text: task.text,\r\n      completed: task.completed,\r\n    }\r\n  };\r\n\r\n  const getTasksFromQueue = (queueId) => {\r\n    const taskInfos = [];\r\n\r\n    const queue = getItemById(queues, queueId);\r\n    if(!queue) {\r\n      return taskInfos;\r\n    }\r\n\r\n    if(queue.pendingTasks.length > 0) {\r\n      taskInfos.push(\r\n        ...queue.pendingTasks.map((task) => {\r\n          return initializeTaskInfo(queue, task);\r\n        })\r\n      );\r\n    }\r\n\r\n    if(showCompletedTasks && queue.completedTasks.length > 0) {\r\n      taskInfos.push(\r\n        ...queue.completedTasks.map((task) => {\r\n          return initializeTaskInfo(queue, task);\r\n        })\r\n      );\r\n    }\r\n\r\n    return taskInfos;\r\n  };\r\n\r\n  const getTopTasksHelper = (queue, sourceArray, destinationArray,  count) => {\r\n    if(sourceArray.length > 0) {\r\n      let endIndex = sourceArray.length;\r\n      if(count && count < endIndex) {\r\n        endIndex = count;\r\n      }\r\n\r\n      for(let i = 0; i < endIndex; i++) {\r\n        destinationArray.push(initializeTaskInfo(queue, sourceArray[i]));\r\n      }\r\n    }\r\n  };\r\n\r\n  const getTopTasks = (count) => {\r\n    const taskInfos = [];\r\n\r\n    for(let i = 0; i < queues.length; i++) {\r\n      const queue = queues[i];\r\n\r\n      getTopTasksHelper(queue, queue.pendingTasks, taskInfos, count);\r\n      \r\n      if(showCompletedTasks) {\r\n        getTopTasksHelper(queue, queue.completedTasks, taskInfos, count);\r\n      }\r\n    }\r\n\r\n    return taskInfos;\r\n  };\r\n\r\n  const getQueueDropdownOptions = () => {\r\n    return queues.map(\r\n      ({ name, id }) => ({ name, id })\r\n    );\r\n  };\r\n\r\n  const getSelectedQueueId = () => {\r\n    return viewQueueId;\r\n  };\r\n\r\n  const actionViewChange = (newView) => {\r\n    if(view !== newView) {\r\n      setView(newView);\r\n    }\r\n  };\r\n\r\n  const actionCreateQueue = ({ name, color }) => {\r\n    const newQueue = {\r\n      name,\r\n      color,\r\n      id: uuidv4(),\r\n      completedTasks: [],\r\n      pendingTasks: [],\r\n    };\r\n\r\n    const newQueues = [...queues, newQueue];\r\n    updateQueues(newQueues);\r\n  };\r\n\r\n  const actionEditQueue = ({ id, name, color }) => {\r\n    const newQueues = [...queues];\r\n    for(let i = 0; i < newQueues.length; i++) {\r\n      if(newQueues[i].id === id) {\r\n        newQueues[i].name = name;\r\n        newQueues[i].color = color;\r\n        break;\r\n      }\r\n    }\r\n\r\n    updateQueues(newQueues);\r\n  };\r\n\r\n  const actionDeleteQueue = (queueId) => {\r\n    const newQueues = queues.filter(queue => queue.id !== queueId);\r\n\r\n    if(viewQueueId === queueId) {\r\n      setViewQueueId(undefined);\r\n      setView(viewModes.topTasks);\r\n    }\r\n    \r\n    updateQueues(newQueues);\r\n  };\r\n\r\n  const actionViewQueue = (queueId) => {\r\n    if(queueId) {\r\n      setViewQueueId(queueId);\r\n      setView(viewModes.viewQueue);\r\n    } \r\n  };\r\n\r\n  const actionToggleShowCompletedTasks = () => {\r\n    setShowCompletedTasks((showCompletedTasks) => !showCompletedTasks);\r\n  };\r\n\r\n  const actionCreateTask = (queueId, text) => {\r\n    const newQueues = [...queues];\r\n\r\n    const queue = getItemById(newQueues, queueId);\r\n    if(queue) {\r\n      const task = {\r\n        id: uuidv4(),\r\n        text,\r\n      };\r\n      \r\n      queue.pendingTasks.push(task);\r\n\r\n      updateQueues(newQueues);\r\n    }\r\n  };\r\n  \r\n  const actionEditTask = (queueId, taskId, newText) => {\r\n    const newQueues = [...queues];\r\n\r\n    const queue = getItemById(newQueues, queueId);\r\n    if(queue) {\r\n      const task = getItemById(queue.pendingTasks, taskId);\r\n      task.text = newText;\r\n\r\n      updateQueues(newQueues);\r\n    }\r\n  };\r\n  \r\n  const actionDeleteTask = (queueId, taskId) => {\r\n    const newQueues = [...queues];\r\n\r\n    const queue = getItemById(newQueues, queueId);\r\n    if(queue) {\r\n      queue.pendingTasks = queue.pendingTasks.filter(task => task.id !== taskId);\r\n\r\n      updateQueues(newQueues);\r\n    }\r\n  };\r\n  \r\n  const actionCompleteTask = (queueId, taskId) => {\r\n    const newQueues = [...queues];\r\n\r\n    let taskIndex;\r\n    const queue = getItemById(newQueues, queueId);\r\n    if(queue) {\r\n      for(let i = 0; i < queue.pendingTasks.length; i++) {\r\n        if(queue.pendingTasks[i].id === taskId) {\r\n          taskIndex = i;\r\n          break;\r\n        }\r\n      }\r\n      if(taskIndex !== undefined) {\r\n        const [completedTask] = queue.pendingTasks.splice(taskIndex, 1);\r\n        completedTask.completed = true;\r\n\r\n        queue.completedTasks.unshift(completedTask);\r\n        updateQueues(newQueues);\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    queues,\r\n    viewModes,\r\n    getCurrentView,\r\n    getShowCompletedTasks,\r\n    getTaskInfos,\r\n    getQueueDropdownOptions,\r\n    getSelectedQueueId,\r\n    actionViewChange,\r\n    actionViewQueue,\r\n    actionToggleShowCompletedTasks,\r\n    actionCreateQueue,\r\n    actionEditQueue,\r\n    actionDeleteQueue,\r\n    actionCreateTask,\r\n    actionEditTask,\r\n    actionDeleteTask,\r\n    actionCompleteTask,\r\n  };\r\n};\r\n\r\nexport default useQueues;\r\n","import React from 'react';\r\n\r\nimport Queue from './Queue.js';\r\nimport TaskList from './TaskList';\r\n\r\nimport useQueues from '../logic/useQueues.js';\r\n\r\nconst VIEW_RADIO = 'viewRadio'\r\nconst VIEW_RADIO_ID_ALL = 'viewRadioAll';\r\nconst VIEW_RADIO_LABEL_ALL = 'All Tasks';\r\nconst VIEW_RADIO_ID_TOP = 'viewRadioTop';\r\nconst VIEW_RADIO_LABEL_TOP = 'Top Tasks';\r\nconst VIEW_RADIO_ID_QUEUE = 'viewRadioQueue';\r\nconst VIEW_RADIO_LABEL_QUEUE = 'View Queue';\r\nconst SHOW_ALL_TASKS_ID = 'showAllTasks'\r\nconst SHOW_ALL_TASKS_LABEL = 'Show completed tasks'\r\nconst NO_QUEUES = 'Create a queue before adding tasks!';\r\nconst SMALL_OFFSET = '1em';\r\n\r\nfunction QueueList() {\r\n  const {\r\n    queues,\r\n    viewModes,\r\n    getCurrentView,\r\n    getShowCompletedTasks,\r\n    getTaskInfos,\r\n    getQueueDropdownOptions,\r\n    getSelectedQueueId,\r\n    actionViewChange,\r\n    actionViewQueue,\r\n    actionToggleShowCompletedTasks,\r\n    actionCreateQueue,\r\n    actionEditQueue,\r\n    actionDeleteQueue,\r\n    actionCreateTask,\r\n    actionEditTask,\r\n    actionDeleteTask,\r\n    actionCompleteTask,\r\n  } = useQueues();\r\n\r\n  const getViewRadioInput = (id, label, viewMode, disabled) => {\r\n    return (\r\n      <div>\r\n        <input type=\"radio\" name={VIEW_RADIO}\r\n          id={id}\r\n          value={viewMode}\r\n          style={{ marginRight: '0.3em' }}\r\n          onChange={(e) => actionViewChange(e.target.value)}\r\n          checked={view === viewMode}\r\n          disabled={disabled}\r\n        />\r\n        <label htmlFor={id} style={{ marginRight: '1em' }}>\r\n          {label}\r\n        </label>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const selectedQueueId = getSelectedQueueId();\r\n  const view = getCurrentView();\r\n\r\n  return (\r\n    <div className='QueueList'>\r\n      <div className='queueBar'>\r\n        {\r\n          queues.map((queue) => (\r\n            <Queue\r\n              key={queue.id}\r\n              queue={queue}\r\n              handleCreate={actionCreateQueue}\r\n              handleEdit={actionEditQueue}\r\n              handleDelete={actionDeleteQueue}\r\n              handleView={actionViewQueue}\r\n              active={selectedQueueId === queue.id ? true : undefined}\r\n            />\r\n          ))\r\n        }\r\n        { \r\n          queues.length < 1 &&\r\n            <div style={{ marginBottom: SMALL_OFFSET }}>\r\n              {NO_QUEUES}\r\n            </div>\r\n        }\r\n        <Queue\r\n          handleCreate={actionCreateQueue}\r\n          handleEdit={actionEditQueue}\r\n          handleDelete={actionDeleteQueue}\r\n          handleView={actionViewQueue}\r\n        />\r\n      </div>\r\n      <div className='mainPanel'>\r\n        {\r\n          queues.length > 0 &&\r\n            <div className='controls' style={{ marginBottom: SMALL_OFFSET, display: 'flex' }}>\r\n              <div style={{ marginRight: '0.5em' }}>\r\n                { getViewRadioInput(VIEW_RADIO_ID_TOP, VIEW_RADIO_LABEL_TOP, viewModes.topTasks) }\r\n                { getViewRadioInput(VIEW_RADIO_ID_ALL, VIEW_RADIO_LABEL_ALL, viewModes.allPendingTasks) }\r\n                { getViewRadioInput(VIEW_RADIO_ID_QUEUE, VIEW_RADIO_LABEL_QUEUE, viewModes.viewQueue, selectedQueueId === undefined) }\r\n              </div>\r\n              <div >\r\n                <input\r\n                    id={SHOW_ALL_TASKS_ID}\r\n                    type='checkbox'\r\n                    onChange={actionToggleShowCompletedTasks}\r\n                    style={{ marginLeft: '0.5em', marginRight: '0.3em' }}\r\n                    checked={getShowCompletedTasks()}\r\n                  />\r\n                <label htmlFor={SHOW_ALL_TASKS_ID}>{SHOW_ALL_TASKS_LABEL}</label>\r\n              </div>\r\n            </div>\r\n        }\r\n        {\r\n          queues.length > 0 &&\r\n            <TaskList\r\n              taskInfos={getTaskInfos()}\r\n              queueDropdownOptions={getQueueDropdownOptions()}\r\n              actionCreateTask={actionCreateTask}\r\n              actionEditTask={actionEditTask}\r\n              actionDeleteTask={actionDeleteTask}\r\n              actionCompleteTask={actionCompleteTask}\r\n            />\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QueueList;\r\n","import React from 'react';\r\nimport { Header, Divider } from 'semantic-ui-react';\r\n\r\nimport QueueList from './QueueList';\r\n\r\nimport '../styles/App.css';\r\n\r\nconst HEADER_TEXT = 'Task Queues';\r\nconst SMALL_OFFSET = '0.1em';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <Header as='h1' style={{ marginBottom: SMALL_OFFSET, }}>\r\n        {HEADER_TEXT}\r\n      </Header>\r\n      <Divider style={{ marginTop: SMALL_OFFSET, }}/>\r\n      <QueueList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}