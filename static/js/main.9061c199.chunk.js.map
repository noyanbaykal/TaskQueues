{"version":3,"sources":["locales/english.js","components/CrudCard.js","logic/utilities.js","components/Queue.js","components/Task.js","components/TaskList.js","Client.js","logic/useQueues.js","components/QueueList.js","components/App.js","serviceWorker.js","index.js"],"names":["getLabelDeleteConfirmation","componentType","name","GET_BUTTON_ARIA_LABEL","ariaLabel","buttonLabel","CreateButton","onCreate","useState","color","setColor","Card","style","textAlign","boxShadow","aria-label","onClick","margin","backgroundColor","onMouseEnter","onMouseLeave","Icon","className","DISPLAY_MODES","Object","freeze","NO_CONTENT","EDIT","DISPLAY","NEED_CONFIRMATION","SHOULD_DISPLAY","content","getConfirmationButtons","onConfirm","onCancel","confirmDisabled","ariaLabelIdentifier","Content","extra","disabled","CrudCard","props","children","componentName","cardTransition","getCardContent","getEditContent","getDisplayContent","deleteLabel","cardStyle","specialButtonIcon","specialButtonFunction","specialButtonAfterFunction","specialButtonLabel","storeBeforeInput","resetAfterInput","deleteHandler","modalHandler","enableClick","enableKeyboardClick","LABEL_CREATE","LABEL_TOGGLE_BUTTONS","getLabelToggleButtons","displayMode","setDisplayMode","showButtons","setShowButtons","onClickCreateOrEdit","onClickDelete","handleConfirm","handleCancel","handleDelete","handleSpecial","duration","setTimeout","getCardExtraContent","editFunction","deleteFunction","marginRight","getCardDisplayButtons","undefined","getOnClick","handleClickCard","getOnKeyboardClick","e","keyCode","target","currentTarget","getCard","role","tabIndex","onKeyDown","Label","type","visible","Transition","animation","showContent","isHexColorString","string","test","getRandomColor","Math","floor","random","toString","padEnd","CARD_STYLE","marginBottom","NEW_QUEUE_ARIA_LABEL","INPUT_FIELD_INFO_NAME","Queue","queue","handleCreate","handleEdit","handleView","active","id","pendingTasks","queueName","queueColor","taskCount","length","beforeEditValues","setBeforeEditValues","setName","taskCountTransition","setTaskCountTransition","useEffect","getLabelStyle","hexColor","fontColor","parseInt","substring","border","htmlFor","Input","title","value","onChange","event","error","Header","overflowWrap","changes","paddingLeft","paddingBottom","NEW_TASK_ARIA_LABEL","completed","borderLeft","opacity","Task","taskInfo","index","queueDropdownOptions","handleComplete","parentObjectName","initialQueueId","queueId","initialText","text","LABEL_SELECT_PARENT","LABEL_INPUT_TASK","DELETE_CONFIRMATION","objectType","parentObjectType","parentName","getLabelDeleteConfirmationWithParentType","setText","setQueueId","taskCompletedTransition","setTaskCompletedTransition","onChangeDropdown","map","key","NO_TASKS","TaskList","taskInfos","actionCreateTask","actionEditTask","actionDeleteTask","actionCompleteTask","getNoTasksMessage","client","queues","localStorage","setItem","JSON","stringify","savedQueues","parse","getItem","Promise","resolve","_","removeItem","viewModes","topTasks","allPendingTasks","viewQueue","getItemById","array","i","findItem","useQueues","childObjectType","setQueues","view","setView","viewQueueId","setViewQueueId","showCompletedTasks","setShowCompletedTasks","getQueues","then","updateQueues","newQueues","initializeTaskInfo","task","getTasksFromQueue","push","completedTasks","getTopTasksHelper","sourceArray","destinationArray","count","endIndex","getTopTasks","getCurrentView","getShowCompletedTasks","getTaskInfos","getQueueDropdownOptions","getSelectedQueueId","actionViewChange","newView","actionViewQueue","actionToggleShowCompletedTasks","actionCreateQueue","newQueue","uuidv4","actionEditQueue","actionDeleteQueue","filter","taskId","newText","taskIndex","splice","completedTask","unshift","VIEW_RADIO_LABEL_TOP","getLabelRadioTop","VIEW_RADIO_LABEL_ALL","getLabelRadioAll","VIEW_RADIO_LABEL_QUEUE","getLabelRadioView","SHOW_ALL_TASKS_LABEL","getLabelShowCompleted","NO_QUEUES","QueueList","getViewRadioInput","label","viewMode","checked","selectedQueueId","Grid","columns","divided","Row","Column","display","marginLeft","App","as","Divider","marginTop","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9061c199.chunk.js","sourcesContent":["/*\r\n  User facing strings are generated in this file which implements an intermediate solution.\r\n  An ideal localization solution would accept key strings and return the value strings based\r\n  on the currently used language by the browser.\r\n*/\r\n\r\n// CrudCard\r\nexport const getLabelCreate = (componentType) => {\r\n  return `Create ${componentType}`;\r\n};\r\n\r\nexport const getLabelToggleButtons = (ariaLabelIdentifier) => {\r\n  return `${ariaLabelIdentifier}: Toggle Buttons`;\r\n};\r\n// ~CrudCard\r\n\r\n// Queue\r\nexport const getLabelInputName = (componentType) => {\r\n  return `Enter ${componentType} name:`;\r\n};\r\n\r\nexport const getLabelInputColor = () => {\r\n  return 'Select a color in 3 or 6 digit hex format: #ffffff';\r\n};\r\n\r\nexport const getLabelDeleteConfirmation = (componentType, name) => {\r\n  return `Are you sure you want to delete the ${componentType}: ${name}?`;\r\n}; \r\n// ~Queue\r\n\r\n// Task\r\nexport const getLabelSelectParent = (parentObjectType) => {\r\n  return `Choose a ${parentObjectType}`;\r\n};\r\n\r\nexport const getLabelInputType = (objectType) => {\r\n  return `Enter ${objectType}`;\r\n};\r\n\r\nexport const getLabelDeleteConfirmationWithParentType = (objectType, parentObjectType, parentName, index) => {\r\n  return `Are you sure you want to delete this ${objectType}, current index: ${index}, in ${parentObjectType}: ${parentName}?`;\r\n};\r\n// ~Task\r\n\r\n// TaskList\r\nexport const getLabelNoPendingObjects = (objectType) => {\r\n  return `You have no pending ${objectType}s!`;\r\n};\r\n// ~TaskList\r\n\r\n// QueueList\r\nexport const getLabelRadioTop = (objectType) => {\r\n  return `Top ${objectType}s`;\r\n};\r\n\r\nexport const getLabelRadioAll = (objectType) => {\r\n  return `All ${objectType}s`;\r\n};\r\n\r\nexport const getLabelRadioView = (objectType) => {\r\n  return `View ${objectType}`;\r\n};\r\n\r\nexport const getLabelShowCompleted = (objectType) => {\r\n  return `Show completed ${objectType}s`;\r\n};\r\n\r\nexport const getLabelCantCreate = (parentObjectType, childObjectType) => {\r\n  return `Create a ${parentObjectType} before adding ${childObjectType}s!`;\r\n};\r\n// ~QueueList\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Icon, Label, Transition } from 'semantic-ui-react';\r\n\r\nimport { getLabelCreate, getLabelToggleButtons } from '../locales/english';\r\n\r\nexport const GET_BUTTON_ARIA_LABEL = (ariaLabel, buttonLabel) => {\r\n  return `${ariaLabel}: ${buttonLabel}`;\r\n};\r\n\r\nexport const ARIA_LABEL_CONFIRM = 'Confirm';\r\nexport const ARIA_LABEL_CANCEL = 'Cancel';\r\nexport const ARIA_LABEL_EDIT = 'Edit';\r\nexport const ARIA_LABEL_DELETE = 'Delete';\r\n\r\nfunction CreateButton({ onCreate, ariaLabel }) {\r\n  const BACKGROUND_COLOR = 'rgb(239, 239, 239)';\r\n  const BACKGROUND_COLOR_HOVERED = 'rgb(210, 210, 210)';\r\n\r\n  const [color, setColor] = useState(BACKGROUND_COLOR);\r\n\r\n  return (\r\n    <Card style={{ textAlign: 'center', boxShadow: 'none'}}>\r\n      <button\r\n        aria-label={ariaLabel}\r\n        onClick={onCreate}\r\n        style={{ margin: '0 auto', backgroundColor: color }}\r\n        onMouseEnter={() => setColor(BACKGROUND_COLOR_HOVERED)}\r\n        onMouseLeave={() => setColor(BACKGROUND_COLOR)}\r\n      >\r\n        <Icon className='plus circle'/>\r\n      </button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst KEY_CODE_ENTER = 13;\r\nconst KEY_CODE_SPACE = 32;\r\n\r\nconst SHOULD_DISPATCH = (keyCode) => {\r\n  return keyCode === KEY_CODE_ENTER || keyCode === KEY_CODE_SPACE;\r\n};\r\n\r\nconst DISPLAY_MODES = Object.freeze({\r\n  NO_CONTENT: 'noContent',\r\n  EDIT: 'edit',\r\n  DISPLAY: 'display',\r\n  NEED_CONFIRMATION: 'needConfirmation',\r\n});\r\n\r\nconst SHOULD_DISPLAY = (content) => {\r\n  return content ? DISPLAY_MODES.DISPLAY : DISPLAY_MODES.NO_CONTENT;\r\n};\r\n\r\nconst getCardDisplayButtons = (editFunction, deleteFunction, specialButtonIcon, handleSpecial, ariaLabelIdentifier, specialButtonLabel) => {\r\n  return (\r\n    <Card.Content extra>\r\n      <button\r\n        aria-label={GET_BUTTON_ARIA_LABEL(ariaLabelIdentifier, ARIA_LABEL_EDIT)}\r\n        onClick={editFunction}\r\n        style={{ marginRight: '0.65em' }}\r\n      >\r\n        <Icon className='pencil alternate' />\r\n      </button>\r\n      <button\r\n        aria-label={GET_BUTTON_ARIA_LABEL(ariaLabelIdentifier, ARIA_LABEL_DELETE)}\r\n        onClick={deleteFunction}\r\n      >\r\n        <Icon className='trash' />\r\n      </button>\r\n      {\r\n        handleSpecial &&\r\n          <button\r\n            aria-label={GET_BUTTON_ARIA_LABEL(ariaLabelIdentifier, specialButtonLabel)}\r\n            className='right floated'\r\n            onClick={handleSpecial}\r\n          >\r\n            <Icon className={specialButtonIcon}/>\r\n          </button>\r\n      }\r\n    </Card.Content>\r\n  );\r\n};\r\n\r\nconst getConfirmationButtons = (onConfirm, onCancel, confirmDisabled, ariaLabelIdentifier) => {\r\n  return (\r\n    <Card.Content extra>\r\n      <button\r\n        aria-label={GET_BUTTON_ARIA_LABEL(ariaLabelIdentifier, ARIA_LABEL_CONFIRM)}\r\n        className='left floated'\r\n        onClick={onConfirm}\r\n        disabled={confirmDisabled}\r\n      >\r\n        <Icon className='check' />\r\n      </button>\r\n      <button\r\n        aria-label={GET_BUTTON_ARIA_LABEL(ariaLabelIdentifier, ARIA_LABEL_CANCEL)}\r\n        className='right floated'\r\n        onClick={onCancel}\r\n      >\r\n        <Icon className='delete' />\r\n      </button>\r\n    </Card.Content>\r\n  );\r\n};\r\n\r\nfunction CrudCard(props) {\r\n  const {\r\n    children, content, componentName, ariaLabelIdentifier, cardTransition, getCardContent, getEditContent, getDisplayContent,\r\n    deleteLabel, cardStyle, specialButtonIcon, specialButtonFunction, specialButtonAfterFunction, specialButtonLabel,\r\n    confirmDisabled, storeBeforeInput, resetAfterInput, deleteHandler, modalHandler, enableClick, enableKeyboardClick,\r\n  } = props;\r\n\r\n  const LABEL_CREATE = getLabelCreate(componentName);\r\n  const LABEL_TOGGLE_BUTTONS = getLabelToggleButtons(ariaLabelIdentifier);\r\n\r\n  const [displayMode, setDisplayMode] = useState(SHOULD_DISPLAY(content));\r\n  const [showButtons, setShowButtons] = useState(false);\r\n\r\n  const onClickCreateOrEdit = () => {\r\n    storeBeforeInput();\r\n\r\n    setDisplayMode(DISPLAY_MODES.EDIT);\r\n  };\r\n  \r\n  const onClickDelete = () => {\r\n    setDisplayMode(DISPLAY_MODES.NEED_CONFIRMATION);\r\n  };\r\n  \r\n  const handleConfirm = () => {\r\n    modalHandler();\r\n\r\n    setDisplayMode(SHOULD_DISPLAY(content));\r\n  };\r\n  \r\n  const handleCancel = () => {\r\n    if(displayMode === DISPLAY_MODES.EDIT) {\r\n      resetAfterInput();\r\n    }\r\n\r\n    setDisplayMode(SHOULD_DISPLAY(content));\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    setDisplayMode(SHOULD_DISPLAY(content));\r\n\r\n    deleteHandler();\r\n  };\r\n\r\n  const handleSpecial = () => {\r\n    if(!specialButtonIcon || !specialButtonFunction) {\r\n      return undefined;\r\n    }\r\n\r\n    specialButtonFunction();\r\n\r\n    if(specialButtonAfterFunction && cardTransition) {\r\n      const { duration } = cardTransition;\r\n\r\n      setTimeout(() => {\r\n        setDisplayMode(SHOULD_DISPLAY(content));\r\n  \r\n        specialButtonAfterFunction();\r\n      }, duration);\r\n    }\r\n  };\r\n\r\n  const composeCardContent = () => {\r\n    return (\r\n      <>\r\n        { \r\n          getCardContent &&\r\n            getCardContent()\r\n        }\r\n        {\r\n          displayMode === DISPLAY_MODES.EDIT &&\r\n            <>\r\n              { getEditContent() }\r\n            </>\r\n        }\r\n        {\r\n          displayMode !== DISPLAY_MODES.EDIT &&\r\n            <>\r\n              { getDisplayContent() }\r\n            </>\r\n        }\r\n        {\r\n          displayMode === DISPLAY_MODES.NEED_CONFIRMATION &&\r\n            <Label>{ deleteLabel }</Label>\r\n        }\r\n      </>\r\n    );\r\n  }\r\n\r\n  const getCardExtraContent = () => {\r\n    if(displayMode === DISPLAY_MODES.DISPLAY) {\r\n      if(!showButtons) {\r\n        return null;\r\n      }\r\n      \r\n      return getCardDisplayButtons(onClickCreateOrEdit, onClickDelete, specialButtonIcon, handleSpecial, ariaLabelIdentifier, specialButtonLabel);\r\n    }\r\n  \r\n    if(displayMode === DISPLAY_MODES.EDIT) {\r\n      return getConfirmationButtons(handleConfirm, handleCancel, confirmDisabled, ariaLabelIdentifier);\r\n    }\r\n  \r\n    if(displayMode === DISPLAY_MODES.NEED_CONFIRMATION) {\r\n      return getConfirmationButtons(handleDelete, handleCancel, undefined, ariaLabelIdentifier);\r\n    }\r\n  \r\n    return null;\r\n  };\r\n\r\n  // Semantic applies a hover effect to cards with onClick handlers set.\r\n  // Unclickable cards should not have this effect.\r\n  const getOnClick = () => {\r\n    if(!enableClick) {\r\n      return undefined;\r\n    }\r\n\r\n    return function() {\r\n      handleClickCard();\r\n    }\r\n  };\r\n\r\n  const getOnKeyboardClick = (e) => {\r\n    if(!enableClick || !enableKeyboardClick) {\r\n      return undefined;\r\n    }\r\n\r\n    return function(e) {\r\n      if(e.target === e.currentTarget && SHOULD_DISPATCH(e.keyCode) && displayMode === DISPLAY_MODES.DISPLAY) {\r\n        handleClickCard();\r\n      } \r\n    }\r\n  };\r\n\r\n  const handleClickCard = () => {\r\n    setShowButtons((showButtons) => !showButtons);\r\n  }\r\n\r\n  const getCard = () => {\r\n    return (\r\n      <Card\r\n        aria-label={LABEL_TOGGLE_BUTTONS}\r\n        role={'button'}\r\n        style={cardStyle}\r\n        onClick={getOnClick()}\r\n        tabIndex={enableClick && enableKeyboardClick && displayMode === DISPLAY_MODES.DISPLAY ? 0 : undefined}\r\n        onKeyDown={getOnKeyboardClick()}\r\n      >\r\n        { composeCardContent() }\r\n        { children }\r\n        { getCardExtraContent() }\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const showContent = () => {\r\n    if(cardTransition) {\r\n      const { type, duration, visible } = cardTransition;\r\n\r\n      return (\r\n        <Transition\r\n          animation={type}\r\n          duration={duration}\r\n          visible={visible}\r\n        >\r\n          { getCard() }\r\n        </Transition>\r\n      );\r\n    } else {\r\n      return getCard();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`${componentName} ${displayMode}`}>\r\n      {\r\n        displayMode === DISPLAY_MODES.NO_CONTENT\r\n        ?\r\n          <CreateButton onCreate={onClickCreateOrEdit} ariaLabel={LABEL_CREATE}/>\r\n        :\r\n          showContent()\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nCrudCard.propTypes = {\r\n  children: PropTypes.node,\r\n  content: PropTypes.object,\r\n  componentName: PropTypes.string.isRequired,\r\n  ariaLabelIdentifier: PropTypes.string,\r\n  cardTransition: PropTypes.shape({\r\n    type: PropTypes.string.isRequired,\r\n    duration: PropTypes.number.isRequired,\r\n    visible: PropTypes.bool.isRequired,\r\n  }),\r\n  getCardContent: PropTypes.func,\r\n  getEditContent: PropTypes.func.isRequired,\r\n  getDisplayContent: PropTypes.func.isRequired,\r\n  deleteLabel: PropTypes.string.isRequired,\r\n  cardStyle: PropTypes.object,\r\n  specialButtonIcon: PropTypes.string,\r\n  specialButtonFunction: PropTypes.func,\r\n  specialButtonAfterFunction: PropTypes.func,\r\n  specialButtonLabel: PropTypes.string,\r\n  confirmDisabled: PropTypes.bool,\r\n  storeBeforeInput: PropTypes.func.isRequired,\r\n  resetAfterInput: PropTypes.func.isRequired,\r\n  deleteHandler: PropTypes.func.isRequired,\r\n  modalHandler: PropTypes.func.isRequired,\r\n  enableClick: PropTypes.bool,\r\n  enableKeyboardClick: PropTypes.bool,\r\n};\r\n\r\nexport default CrudCard;\r\n","export const isHexColorString = (string) => {\r\n  return /^#([A-Fa-f0-9]{3}$)|([A-Fa-f0-9]{6}$)/.test(string);\r\n};\r\n\r\nconst HEX_STRING_LENGTH = 7;\r\nconst HEX = 16;\r\n\r\nexport const getRandomColor = () => {\r\n  let hex = `#${Math.floor(Math.random()*16777215).toString(HEX)}`;\r\n  return hex.padEnd(HEX_STRING_LENGTH, '0');\r\n};\r\n\r\n// https://stackoverflow.com/a/1855903\r\nexport const getFontColor = (hexColor) => {\r\n  const r = parseInt(hexColor.substring(1, 3), HEX);\r\n  const g = parseInt(hexColor.substring(3, 5), HEX);\r\n  const b = parseInt(hexColor.substring(5, 7), HEX);\r\n\r\n  let luminance = ( 0.299 * r + 0.587 * g + 0.114 * b ) / 255;\r\n\r\n  return luminance > 0.5\r\n    ? '#000000'   // bright colors - black font\r\n    : '#ffffff';  // dark colors - white font\r\n};\r\n\r\nexport const findItem = (array, key, value) => {\r\n  for(let i = 0; i < array.length; i++) {\r\n    if(array[i][key] === value) {\r\n      return array[i];\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Icon, Input, Label, Transition } from 'semantic-ui-react';\r\n\r\nimport CrudCard from './CrudCard';\r\nimport { isHexColorString, getFontColor, getRandomColor } from '../logic/utilities';\r\nimport { getLabelInputName, getLabelInputColor, getLabelDeleteConfirmation } from '../locales/english';\r\n\r\nconst TASK_ANIMATION_TYPE = 'flash';\r\nconst TASK_ANIMATION_DURATION = 600;\r\nconst CARD_STYLE = { marginBottom: '1.2em' };\r\n\r\nexport const QUEUE_COMPONENT_NAME = 'Queue';\r\nexport const NEW_QUEUE_ARIA_LABEL = `New ${QUEUE_COMPONENT_NAME}`;\r\nconst VIEW_QUEUE_ICON = 'eye';\r\nconst LABEL_VIEW = 'View';\r\nconst HTML_ID_INPUT_NAME = 'name';\r\nconst HTML_ID_INPUT_COLOR = 'color';\r\nconst INPUT_FIELD_INFO_NAME = getLabelInputName(QUEUE_COMPONENT_NAME);\r\nconst INPUT_FIELD_INFO_COLOR = getLabelInputColor();\r\n\r\n// The queue will be undefined if this is the 'add queue' button instance\r\nfunction Queue({ queue, handleCreate, handleEdit, handleDelete, handleView, active }) {\r\n  const {id, pendingTasks, name: queueName, color: queueColor} = queue || {};\r\n  const taskCount = (pendingTasks || []).length;\r\n\r\n  const [beforeEditValues, setBeforeEditValues] = useState({});\r\n  const [name, setName] = useState(queueName || '');\r\n  const [color, setColor] = useState(queueColor || getRandomColor());\r\n  const [taskCountTransition, setTaskCountTransition] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setTaskCountTransition((taskCountTransition) => !taskCountTransition);\r\n  }, [taskCount]);\r\n\r\n  const storeBeforeInput = () => {\r\n    setBeforeEditValues({\r\n      name,\r\n      color\r\n    });\r\n  };\r\n\r\n  const resetAfterInput = () => {\r\n    setName(beforeEditValues.name);\r\n    setColor(beforeEditValues.color);\r\n\r\n    setBeforeEditValues({});\r\n  };\r\n\r\n  const onClickView = () => {\r\n    handleView(id);\r\n  };\r\n\r\n  const onModalConfirm = () => {\r\n    if(beforeEditValues.name !== name || beforeEditValues.color !== color) {\r\n      const changes = {\r\n        name,\r\n        color\r\n      };\r\n\r\n      if(id) {\r\n        changes.id = id;\r\n        handleEdit(changes);\r\n      } else {\r\n        handleCreate(changes);\r\n\r\n        // Need to manually update values to prevent staleness after creation.\r\n        setName('');\r\n        setColor(getRandomColor());\r\n      }\r\n\r\n      setBeforeEditValues({});\r\n    }\r\n  };\r\n\r\n  const getLabelStyle = () => {\r\n    const fontColor = getFontColor(color);\r\n    const border = `1px ${fontColor === '#ffffff' ? 'outset white' : 'solid black'}`;\r\n\r\n    return {\r\n      backgroundColor: color,\r\n      color: fontColor,\r\n      border,\r\n    };\r\n  };\r\n\r\n  const inputHasError = () => {\r\n    return !isHexColorString(color) || !name || name.length < 1;\r\n  };\r\n\r\n  const getCardContent = () => {\r\n    return (\r\n      <>\r\n        <div className='ui tiny label' style={{ backgroundColor: color }}/>\r\n        { \r\n          taskCount > 0 &&\r\n            <Transition\r\n              animation={TASK_ANIMATION_TYPE}\r\n              duration={TASK_ANIMATION_DURATION}\r\n              visible={taskCountTransition}\r\n            >\r\n              <div className='ui circular label floating'\r\n                style={getLabelStyle()}\r\n              >\r\n                {taskCount}\r\n              </div>\r\n            </Transition>\r\n        }\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getEditContent = () => {\r\n    return (\r\n      <>\r\n        <Label htmlFor={HTML_ID_INPUT_COLOR}>{INPUT_FIELD_INFO_COLOR}</Label>\r\n        <Input\r\n          id={HTML_ID_INPUT_COLOR}\r\n          type='text'\r\n          title='Enter Hex formatted color string'\r\n          value={color}\r\n          onChange={event => setColor(event.target.value)}\r\n          error={isHexColorString(color) ? undefined : true}\r\n        />\r\n        <Label htmlFor={HTML_ID_INPUT_NAME}>{INPUT_FIELD_INFO_NAME}</Label>\r\n        <Input\r\n          id={HTML_ID_INPUT_NAME}\r\n          type='text'\r\n          value={name}\r\n          onChange={event => setName(event.target.value)}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getDisplayContent = () => {\r\n    return (\r\n      <Card.Content>\r\n        <Card.Header textAlign='center' style={{ overflowWrap: 'break-word' }}>\r\n          {name}\r\n        </Card.Header>\r\n      </Card.Content>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CrudCard\r\n      content={queue}\r\n      componentName={QUEUE_COMPONENT_NAME}\r\n      ariaLabelIdentifier={queue ? queue.name : NEW_QUEUE_ARIA_LABEL}\r\n      getCardContent={getCardContent}\r\n      getEditContent={getEditContent}\r\n      getDisplayContent={getDisplayContent}\r\n      deleteLabel={getLabelDeleteConfirmation(QUEUE_COMPONENT_NAME, name)}\r\n      cardStyle={CARD_STYLE}\r\n      specialButtonIcon={VIEW_QUEUE_ICON}\r\n      specialButtonFunction={onClickView}\r\n      specialButtonLabel={LABEL_VIEW}\r\n      confirmDisabled={inputHasError() ? true : undefined}\r\n      storeBeforeInput={storeBeforeInput}\r\n      resetAfterInput={resetAfterInput}\r\n      deleteHandler={() => handleDelete(id)}\r\n      modalHandler={onModalConfirm}\r\n      enableClick={true}\r\n      enableKeyboardClick={true}\r\n    >\r\n      {\r\n        active &&\r\n          <Icon className={VIEW_QUEUE_ICON} style={{ paddingLeft: '0.3em', paddingBottom: '1.5em' }}/>\r\n      }\r\n    </CrudCard>\r\n  );\r\n}\r\n\r\nQueue.propTypes = {\r\n  queue: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    pendingTasks: PropTypes.array.isRequired,\r\n  }),\r\n  handleCreate: PropTypes.func.isRequired,\r\n  handleEdit: PropTypes.func.isRequired,\r\n  handleDelete: PropTypes.func.isRequired,\r\n  handleView: PropTypes.func.isRequired,\r\n  active: PropTypes.bool,\r\n};\r\n\r\nexport default Queue;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Icon, Input, Label } from 'semantic-ui-react';\r\n\r\nimport CrudCard from './CrudCard';\r\nimport { getLabelSelectParent, getLabelInputType, getLabelDeleteConfirmationWithParentType } from '../locales/english';\r\n\r\nexport const TASK_NAME = 'Task';\r\nexport const NEW_TASK_ARIA_LABEL = `New ${TASK_NAME}`;\r\nconst COMPLETE_TASK_ICON = 'check square outline';\r\nconst TASK_ANIMATION_TYPE = 'jiggle';\r\nconst TASK_ANIMATION_DURATION = 500;\r\nconst TASK_BORDER_SIZE = '0.8em';\r\nconst COMPLETED_TASK_OPACITY = 0.65;\r\nconst CARD_STYLE = (color, completed) => {\r\n  return {\r\n    marginBottom: '1em',\r\n    borderLeft: `${TASK_BORDER_SIZE} solid ${color}`,\r\n    opacity: completed ? COMPLETED_TASK_OPACITY : undefined,\r\n  };\r\n};\r\n\r\nconst HTML_ID_INPUT_TASK = 'task';\r\nconst HTML_ID_INPUT_QUEUE = 'queue-select';\r\nconst LABEL_COMPLETE = 'Complete';\r\n\r\n// The taskInfo will be undefined if this is the 'add queue' button instance\r\nfunction Task({ taskInfo, index, queueDropdownOptions, handleCreate, handleEdit, handleDelete, handleComplete, parentObjectName }) {\r\n  const { queueName, queueId: initialQueueId, id, color, text: initialText, completed } = taskInfo || {};\r\n\r\n  const LABEL_SELECT_PARENT = getLabelSelectParent(parentObjectName);\r\n  const LABEL_INPUT_TASK = getLabelInputType(TASK_NAME);\r\n  const DELETE_CONFIRMATION = getLabelDeleteConfirmationWithParentType(TASK_NAME, parentObjectName, queueName, index)\r\n\r\n  const [beforeEditValues, setBeforeEditValues] = useState({});\r\n  const [text, setText] = useState(initialText || '');\r\n  const [queueId, setQueueId] = useState(initialQueueId || queueDropdownOptions[0].id);\r\n  const [taskCompletedTransition, setTaskCompletedTransition] = useState(true);\r\n\r\n  const cardTransition = {\r\n    type: TASK_ANIMATION_TYPE,\r\n    duration: TASK_ANIMATION_DURATION,\r\n    visible: taskCompletedTransition,\r\n  };\r\n\r\n  const storeBeforeInput = () => {\r\n    setBeforeEditValues({\r\n      text,\r\n      queueId,\r\n    });\r\n  };\r\n\r\n  const resetAfterInput = () => {\r\n    setText(beforeEditValues.text);\r\n    setQueueId(beforeEditValues.queueId);\r\n\r\n    setBeforeEditValues({});\r\n  };\r\n\r\n  const onChangeDropdown = (event) => {\r\n    if(queueId !== event.target.value) {\r\n      setQueueId(event.target.value);\r\n    }\r\n  };\r\n\r\n  const hasValidText = () => {\r\n    return !text || text.length < 1;\r\n  }\r\n\r\n  const onModalConfirm = () => {\r\n    if(beforeEditValues.text !== text || beforeEditValues.queueId !== queueId) {\r\n      if(id) {\r\n        handleEdit(queueId, id, text);\r\n      } else {\r\n        handleCreate(queueId, text);\r\n\r\n        // Need to manually update values to prevent staleness after creation.\r\n        setText('');\r\n        setQueueId(queueDropdownOptions[0].id);\r\n      }\r\n\r\n      setBeforeEditValues({});\r\n    }\r\n  };\r\n\r\n  const onDeleteConfirm = () => {\r\n    handleDelete(queueId, id);\r\n  };\r\n\r\n  const onClickComplete = () => {\r\n    setTaskCompletedTransition((taskCompletedTransition) => !taskCompletedTransition);\r\n  };\r\n\r\n  const afterClickComplete = () => {\r\n    handleComplete(queueId, id);\r\n  };\r\n\r\n  const getEditContent = () => {\r\n    return (\r\n      <>\r\n        { \r\n          !initialQueueId &&\r\n            <>\r\n              <Label htmlFor={HTML_ID_INPUT_QUEUE}>{LABEL_SELECT_PARENT}</Label>\r\n              <select id={HTML_ID_INPUT_QUEUE} onChange={onChangeDropdown}>\r\n                {\r\n                  queueDropdownOptions.map((queue) =>\r\n                    <option key={queue.id} value={queue.id}>{queue.name}</option>\r\n                  )\r\n                }\r\n              </select>\r\n            </>\r\n        }\r\n        <Label htmlFor={HTML_ID_INPUT_TASK}>{LABEL_INPUT_TASK}</Label>\r\n        <Input\r\n          id={HTML_ID_INPUT_TASK}\r\n          type='text'\r\n          value={text}\r\n          onChange={event => setText(event.target.value)}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  const getDisplayContent = () => {\r\n    return (\r\n      <Card.Content>\r\n        {/* Need to override text color after giving the card an onClick handler*/}\r\n        <div style={{ overflowWrap: 'break-word', textAlign: 'center', color: 'black' }}>\r\n          {text}\r\n          {\r\n            completed &&\r\n              <Icon className='right floated green check'></Icon>\r\n          }\r\n        </div>\r\n      </Card.Content>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CrudCard\r\n      content={taskInfo}\r\n      componentName={TASK_NAME}\r\n      ariaLabelIdentifier={index ? `${TASK_NAME} ${index}` : NEW_TASK_ARIA_LABEL}\r\n      cardTransition={cardTransition}\r\n      getEditContent={getEditContent}\r\n      getDisplayContent={getDisplayContent}\r\n      deleteLabel={DELETE_CONFIRMATION}\r\n      cardStyle={CARD_STYLE(color, completed)}\r\n      specialButtonIcon={COMPLETE_TASK_ICON}\r\n      specialButtonFunction={onClickComplete}\r\n      specialButtonAfterFunction={afterClickComplete}\r\n      specialButtonLabel={LABEL_COMPLETE}\r\n      confirmDisabled={hasValidText() ? true : undefined}\r\n      storeBeforeInput={storeBeforeInput}\r\n      resetAfterInput={resetAfterInput}\r\n      deleteHandler={onDeleteConfirm}\r\n      modalHandler={onModalConfirm}\r\n      enableClick={!completed}\r\n      enableKeyboardClick={true}\r\n    >\r\n    </CrudCard>\r\n  )\r\n};\r\n\r\nTask.propTypes = {\r\n  taskInfo: PropTypes.shape({\r\n    queueName: PropTypes.string.isRequired,\r\n    queueId: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    completed: PropTypes.bool,\r\n  }),\r\n  index: PropTypes.number,\r\n  queueDropdownOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n  })).isRequired,\r\n  handleCreate: PropTypes.func.isRequired,\r\n  handleEdit: PropTypes.func.isRequired,\r\n  handleDelete: PropTypes.func.isRequired,\r\n  handleComplete: PropTypes.func.isRequired,\r\n  parentObjectName: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Task, { TASK_NAME } from './Task';\r\n\r\nimport { getLabelNoPendingObjects } from '../locales/english';\r\n\r\nconst SMALL_OFFSET = '1em';\r\nconst NO_TASKS = getLabelNoPendingObjects(TASK_NAME);\r\n\r\nfunction TaskList({ taskInfos, parentObjectName, queueDropdownOptions, actionCreateTask, actionEditTask, actionDeleteTask, actionCompleteTask }) {\r\n  const getNoTasksMessage = () => {\r\n    return (\r\n      <div style={{ marginBottom: SMALL_OFFSET }}>\r\n        {NO_TASKS}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className='TaskList'>\r\n      { \r\n        taskInfos.length < 1\r\n        ? \r\n          <>\r\n            { getNoTasksMessage() }\r\n          </>\r\n        : (\r\n          <div>\r\n            { \r\n              taskInfos[0].completed &&\r\n                getNoTasksMessage()\r\n            }\r\n            {\r\n              taskInfos.map((taskInfo, index) => (\r\n                <Task\r\n                  key={`${taskInfo.id}`}\r\n                  taskInfo={taskInfo}\r\n                  index={index + 1}\r\n                  queueDropdownOptions={queueDropdownOptions}\r\n                  handleCreate={actionCreateTask}\r\n                  handleEdit={actionEditTask}\r\n                  handleDelete={actionDeleteTask}\r\n                  handleComplete={actionCompleteTask}\r\n                  parentObjectName={parentObjectName}\r\n                />\r\n              ))\r\n            }\r\n          </div>\r\n          )\r\n      }\r\n      <Task\r\n        queueDropdownOptions={queueDropdownOptions}\r\n        handleCreate={actionCreateTask}\r\n        handleEdit={actionEditTask}\r\n        handleDelete={actionDeleteTask}\r\n        handleComplete={actionCompleteTask}\r\n        parentObjectName={parentObjectName}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nTaskList.propTypes = {\r\n  taskInfos: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      queueName: PropTypes.string.isRequired,\r\n      queueId: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      color: PropTypes.string.isRequired,\r\n      text: PropTypes.string.isRequired,\r\n      completed: PropTypes.bool,\r\n    })\r\n  ).isRequired,\r\n  parentObjectName: PropTypes.string.isRequired,\r\n  queueDropdownOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n  })).isRequired,\r\n  actionCreateTask: PropTypes.func.isRequired,\r\n  actionEditTask: PropTypes.func.isRequired,\r\n  actionDeleteTask: PropTypes.func.isRequired,\r\n  actionCompleteTask: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TaskList;\r\n","const LOCAL_STORAGE_KEY_QUEUES = 'queues';\r\n\r\nclass Client {\r\n  setQueues(queues) {\r\n    localStorage.setItem(LOCAL_STORAGE_KEY_QUEUES, JSON.stringify(queues));\r\n  };\r\n\r\n  getQueues() {\r\n    const savedQueues = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_QUEUES)) || [];\r\n    return new Promise((resolve, _) => resolve(savedQueues));\r\n  };\r\n\r\n  removeQueues() {\r\n    localStorage.removeItem(LOCAL_STORAGE_KEY_QUEUES);\r\n  };\r\n}\r\n\r\nexport const client = new Client();\r\n","import { useState, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { findItem } from './utilities';\r\nimport { client } from '../Client';\r\n\r\nconst viewModes = Object.freeze({\r\n  topTasks: 'topTasks',\r\n  allPendingTasks: 'allPendingTasks',\r\n  viewQueue: 'viewQueue',\r\n});\r\n\r\nconst getItemById = (array, id) => {\r\n  return findItem(array, 'id', id);\r\n};\r\n\r\nfunction useQueues() {\r\n  const [queues, setQueues] = useState([]);\r\n  const [view, setView] = useState(viewModes.topTasks);\r\n  const [viewQueueId, setViewQueueId] = useState(undefined);\r\n  const [showCompletedTasks, setShowCompletedTasks] = useState(false);\r\n\r\n  useEffect(() => {\r\n    client.getQueues().then((savedQueues) => {\r\n      if(savedQueues.length > 0) {\r\n        setViewQueueId(savedQueues[0].id);\r\n      }\r\n\r\n      setQueues(savedQueues);\r\n    });\r\n  }, []);\r\n\r\n  const getCurrentView = () => {\r\n    return view;\r\n  };\r\n\r\n  const getShowCompletedTasks = () => {\r\n    return showCompletedTasks;\r\n  };\r\n\r\n  const updateQueues = (newQueues) => {\r\n    setQueues(newQueues);\r\n    client.setQueues(newQueues);\r\n  };\r\n\r\n  const getTaskInfos = () => {\r\n    switch(view) {\r\n      case viewModes.viewQueue:\r\n        return getTasksFromQueue(viewQueueId);\r\n      case viewModes.allPendingTasks:\r\n        return getTopTasks();\r\n      case viewModes.topTasks:\r\n      default:\r\n        return getTopTasks(1);\r\n    }\r\n  };\r\n\r\n  const initializeTaskInfo = (queue, task) => {\r\n    return {\r\n      queueName: queue.name,\r\n      queueId: queue.id,\r\n      id: task.id,\r\n      color: queue.color,\r\n      text: task.text,\r\n      completed: task.completed,\r\n    }\r\n  };\r\n\r\n  const getTasksFromQueue = (queueId) => {\r\n    const taskInfos = [];\r\n\r\n    const queue = getItemById(queues, queueId);\r\n    if(!queue) {\r\n      return taskInfos;\r\n    }\r\n\r\n    if(queue.pendingTasks.length > 0) {\r\n      taskInfos.push(\r\n        ...queue.pendingTasks.map((task) => {\r\n          return initializeTaskInfo(queue, task);\r\n        })\r\n      );\r\n    }\r\n\r\n    if(showCompletedTasks && queue.completedTasks.length > 0) {\r\n      taskInfos.push(\r\n        ...queue.completedTasks.map((task) => {\r\n          return initializeTaskInfo(queue, task);\r\n        })\r\n      );\r\n    }\r\n\r\n    return taskInfos;\r\n  };\r\n\r\n  const getTopTasksHelper = (queue, sourceArray, destinationArray,  count) => {\r\n    if(sourceArray.length > 0) {\r\n      let endIndex = sourceArray.length;\r\n      if(count && count < endIndex) {\r\n        endIndex = count;\r\n      }\r\n\r\n      for(let i = 0; i < endIndex; i++) {\r\n        destinationArray.push(initializeTaskInfo(queue, sourceArray[i]));\r\n      }\r\n    }\r\n  };\r\n\r\n  const getTopTasks = (count) => {\r\n    const taskInfos = [];\r\n\r\n    for(let i = 0; i < queues.length; i++) {\r\n      const queue = queues[i];\r\n\r\n      getTopTasksHelper(queue, queue.pendingTasks, taskInfos, count);\r\n      \r\n      if(showCompletedTasks) {\r\n        getTopTasksHelper(queue, queue.completedTasks, taskInfos, count);\r\n      }\r\n    }\r\n\r\n    return taskInfos;\r\n  };\r\n\r\n  const getQueueDropdownOptions = () => {\r\n    return queues.map(\r\n      ({ name, id }) => ({ name, id })\r\n    );\r\n  };\r\n\r\n  const getSelectedQueueId = () => {\r\n    return viewQueueId;\r\n  };\r\n\r\n  const actionViewChange = (newView) => {\r\n    if(view !== newView) {\r\n      setView(newView);\r\n    }\r\n  };\r\n\r\n  const actionCreateQueue = ({ name, color }) => {\r\n    const newQueue = {\r\n      name,\r\n      color,\r\n      id: uuidv4(),\r\n      completedTasks: [],\r\n      pendingTasks: [],\r\n    };\r\n\r\n    const newQueues = [...queues, newQueue];\r\n    updateQueues(newQueues);\r\n  };\r\n\r\n  const actionEditQueue = ({ id, name, color }) => {\r\n    const newQueues = [...queues];\r\n    for(let i = 0; i < newQueues.length; i++) {\r\n      if(newQueues[i].id === id) {\r\n        newQueues[i].name = name;\r\n        newQueues[i].color = color;\r\n        break;\r\n      }\r\n    }\r\n\r\n    updateQueues(newQueues);\r\n  };\r\n\r\n  const actionDeleteQueue = (queueId) => {\r\n    const newQueues = queues.filter(queue => queue.id !== queueId);\r\n\r\n    if(viewQueueId === queueId) {\r\n      setViewQueueId(undefined);\r\n      setView(viewModes.topTasks);\r\n    }\r\n    \r\n    updateQueues(newQueues);\r\n  };\r\n\r\n  const actionViewQueue = (queueId) => {\r\n    if(queueId) {\r\n      setViewQueueId(queueId);\r\n      setView(viewModes.viewQueue);\r\n    } \r\n  };\r\n\r\n  const actionToggleShowCompletedTasks = () => {\r\n    setShowCompletedTasks((showCompletedTasks) => !showCompletedTasks);\r\n  };\r\n\r\n  const actionCreateTask = (queueId, text) => {\r\n    const newQueues = [...queues];\r\n\r\n    const queue = getItemById(newQueues, queueId);\r\n    if(queue) {\r\n      const task = {\r\n        id: uuidv4(),\r\n        text,\r\n      };\r\n      \r\n      queue.pendingTasks.push(task);\r\n\r\n      updateQueues(newQueues);\r\n    }\r\n  };\r\n  \r\n  const actionEditTask = (queueId, taskId, newText) => {\r\n    const newQueues = [...queues];\r\n\r\n    const queue = getItemById(newQueues, queueId);\r\n    if(queue) {\r\n      const task = getItemById(queue.pendingTasks, taskId);\r\n      task.text = newText;\r\n\r\n      updateQueues(newQueues);\r\n    }\r\n  };\r\n  \r\n  const actionDeleteTask = (queueId, taskId) => {\r\n    const newQueues = [...queues];\r\n\r\n    const queue = getItemById(newQueues, queueId);\r\n    if(queue) {\r\n      queue.pendingTasks = queue.pendingTasks.filter(task => task.id !== taskId);\r\n\r\n      updateQueues(newQueues);\r\n    }\r\n  };\r\n  \r\n  const actionCompleteTask = (queueId, taskId) => {\r\n    const newQueues = [...queues];\r\n\r\n    let taskIndex;\r\n    const queue = getItemById(newQueues, queueId);\r\n    if(queue) {\r\n      for(let i = 0; i < queue.pendingTasks.length; i++) {\r\n        if(queue.pendingTasks[i].id === taskId) {\r\n          taskIndex = i;\r\n          break;\r\n        }\r\n      }\r\n      if(taskIndex !== undefined) {\r\n        const [completedTask] = queue.pendingTasks.splice(taskIndex, 1);\r\n        completedTask.completed = true;\r\n\r\n        queue.completedTasks.unshift(completedTask);\r\n        updateQueues(newQueues);\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    queues,\r\n    viewModes,\r\n    getCurrentView,\r\n    getShowCompletedTasks,\r\n    getTaskInfos,\r\n    getQueueDropdownOptions,\r\n    getSelectedQueueId,\r\n    actionViewChange,\r\n    actionViewQueue,\r\n    actionToggleShowCompletedTasks,\r\n    actionCreateQueue,\r\n    actionEditQueue,\r\n    actionDeleteQueue,\r\n    actionCreateTask,\r\n    actionEditTask,\r\n    actionDeleteTask,\r\n    actionCompleteTask,\r\n  };\r\n};\r\n\r\nexport default useQueues;\r\n","import React from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\n\r\nimport Queue, { QUEUE_COMPONENT_NAME } from './Queue.js';\r\nimport { TASK_NAME } from './Task.js';\r\nimport TaskList from './TaskList';\r\n\r\nimport useQueues from '../logic/useQueues.js';\r\nimport { getLabelRadioTop, getLabelRadioAll, getLabelRadioView, getLabelShowCompleted, getLabelCantCreate } from '../locales/english';\r\n\r\nconst SMALL_OFFSET = '1em';\r\nconst VIEW_RADIO = 'viewRadio'\r\nconst VIEW_RADIO_ID_TOP = 'viewRadioTop';\r\nconst VIEW_RADIO_LABEL_TOP = getLabelRadioTop(TASK_NAME);\r\nconst VIEW_RADIO_ID_ALL = 'viewRadioAll';\r\nconst VIEW_RADIO_LABEL_ALL = getLabelRadioAll(TASK_NAME);\r\nconst VIEW_RADIO_ID_QUEUE = 'viewRadioQueue';\r\nconst VIEW_RADIO_LABEL_QUEUE = getLabelRadioView(QUEUE_COMPONENT_NAME);\r\nconst SHOW_ALL_TASKS_ID = 'showAllTasks'\r\nconst SHOW_ALL_TASKS_LABEL = getLabelShowCompleted(TASK_NAME);\r\nconst NO_QUEUES = getLabelCantCreate(QUEUE_COMPONENT_NAME, TASK_NAME);\r\n\r\n\r\nfunction QueueList() {\r\n  const {\r\n    queues,\r\n    viewModes,\r\n    getCurrentView,\r\n    getShowCompletedTasks,\r\n    getTaskInfos,\r\n    getQueueDropdownOptions,\r\n    getSelectedQueueId,\r\n    actionViewChange,\r\n    actionViewQueue,\r\n    actionToggleShowCompletedTasks,\r\n    actionCreateQueue,\r\n    actionEditQueue,\r\n    actionDeleteQueue,\r\n    actionCreateTask,\r\n    actionEditTask,\r\n    actionDeleteTask,\r\n    actionCompleteTask,\r\n  } = useQueues();\r\n\r\n  const getViewRadioInput = (id, label, viewMode, disabled) => {\r\n    return (\r\n      <div>\r\n        <input type=\"radio\" name={VIEW_RADIO}\r\n          id={id}\r\n          value={viewMode}\r\n          style={{ marginRight: '0.3em' }}\r\n          onChange={(e) => actionViewChange(e.target.value)}\r\n          checked={view === viewMode}\r\n          disabled={disabled}\r\n        />\r\n        <label htmlFor={id} style={{ marginRight: '1em' }}>\r\n          {label}\r\n        </label>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const selectedQueueId = getSelectedQueueId();\r\n  const view = getCurrentView();\r\n\r\n  return (\r\n    <Grid className='QueueList' columns={2} divided>\r\n      <Grid.Row>\r\n        <Grid.Column>\r\n          <div className='queueBar'>\r\n            {\r\n              queues.map((queue) => (\r\n                <Queue\r\n                  key={queue.id}\r\n                  queue={queue}\r\n                  handleCreate={actionCreateQueue}\r\n                  handleEdit={actionEditQueue}\r\n                  handleDelete={actionDeleteQueue}\r\n                  handleView={actionViewQueue}\r\n                  active={selectedQueueId === queue.id ? true : undefined}\r\n                />\r\n              ))\r\n            }\r\n            { \r\n              queues.length < 1 &&\r\n                <div style={{ marginBottom: SMALL_OFFSET }}>\r\n                  {NO_QUEUES}\r\n                </div>\r\n            }\r\n            <Queue\r\n              handleCreate={actionCreateQueue}\r\n              handleEdit={actionEditQueue}\r\n              handleDelete={actionDeleteQueue}\r\n              handleView={actionViewQueue}\r\n            />\r\n          </div>\r\n        </Grid.Column>\r\n        <Grid.Column>\r\n          <div className='mainPanel'>\r\n            {\r\n              queues.length > 0 &&\r\n                <div className='controls' style={{ marginBottom: SMALL_OFFSET, display: 'flex' }}>\r\n                  <div style={{ marginRight: '0.5em' }}>\r\n                    { getViewRadioInput(VIEW_RADIO_ID_TOP, VIEW_RADIO_LABEL_TOP, viewModes.topTasks) }\r\n                    { getViewRadioInput(VIEW_RADIO_ID_ALL, VIEW_RADIO_LABEL_ALL, viewModes.allPendingTasks) }\r\n                    { getViewRadioInput(VIEW_RADIO_ID_QUEUE, VIEW_RADIO_LABEL_QUEUE, viewModes.viewQueue, selectedQueueId === undefined) }\r\n                  </div>\r\n                  <div >\r\n                    <input\r\n                        id={SHOW_ALL_TASKS_ID}\r\n                        type='checkbox'\r\n                        onChange={actionToggleShowCompletedTasks}\r\n                        style={{ marginLeft: '0.5em', marginRight: '0.3em' }}\r\n                        checked={getShowCompletedTasks()}\r\n                      />\r\n                    <label htmlFor={SHOW_ALL_TASKS_ID}>{SHOW_ALL_TASKS_LABEL}</label>\r\n                  </div>\r\n                </div>\r\n            }\r\n            {\r\n              queues.length > 0 &&\r\n                <TaskList\r\n                  taskInfos={getTaskInfos()}\r\n                  parentObjectName={QUEUE_COMPONENT_NAME}\r\n                  queueDropdownOptions={getQueueDropdownOptions()}\r\n                  actionCreateTask={actionCreateTask}\r\n                  actionEditTask={actionEditTask}\r\n                  actionDeleteTask={actionDeleteTask}\r\n                  actionCompleteTask={actionCompleteTask}\r\n                />\r\n            }\r\n          </div>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default QueueList;\r\n","import React from 'react';\r\nimport { Container, Divider, Header } from 'semantic-ui-react';\r\n\r\nimport QueueList from './QueueList';\r\n\r\nimport '../styles/App.css';\r\n\r\nconst HEADER_TEXT = 'Task Queues';\r\nconst MINOR_OFFSET = '0.1em';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <Header as='h1' style={{ marginBottom: MINOR_OFFSET, }}>\r\n        {HEADER_TEXT}\r\n      </Header>\r\n      <Divider style={{ marginTop: MINOR_OFFSET, }}/>\r\n      <Container>\r\n        <QueueList />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}